#!/usr/bin/env node

var util    = require('util');
var tldr    = require('../lib/tldr');
var pkg     = require('../package');
var program = require('commander');

program
  .version(pkg.version)
  .usage('commandName [options]')
  .option('-o, --os [type]', 'Override the operating system [linux, osx, sunos]')
  .option('-c, --clear-cache', 'Clear the local cache')
  .option('-u, --update', 'Update the local cache')
  .option('-g, --github [user:pass]', 'Set github user to [user] and the github password to [pass] (used for updating, only necessary if updating more than 30 times in an hour)')
  .option('-l, --list', 'List the commands in the local cache')
  .option('-r, --random', 'Show a random command')
  .option('-t, --tag [tag]', 'Update from the specified tag. Defaults to the newest tag');

program.on('--help', function() {
  console.log('  Examples:');
  console.log('');
  console.log('    $ tldr tar');
  console.log('    $ tldr svcs --os sunos');
  console.log('    $ tldr --clear-cache');
  console.log('    $ tldr --update');
  console.log('    $ tldr --update -g cats:meow');
  console.log('    $ tldr --list');
  console.log('    $ tldr --random');
  console.log('');
});

program.parse(process.argv);

if (program.clearCache) {
  tldr.clearCache();
} else if (program.update) {
  tldr.updateCache(program);
} else if (program.list) {
  tldr.listCache();
} else if (program.random) {
  try {
    var rander = tldr.getRandom();
    console.log(rander.file + ":");
    program.os = rander.os;
    tldr.get(rander.file, program);
  } catch (ex) {
    util.error(ex);
    process.exit(1);
  }
} else if (program.args.length == 1) {
  try {
    tldr.get(program.args[0], program);
  } catch (ex) {
    util.error(ex);
    process.exit(1);
  }
} else {
  util.log('Usage: tldr <command>');
  process.exit(1);
}
